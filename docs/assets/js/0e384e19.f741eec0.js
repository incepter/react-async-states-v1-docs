"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[671],{4993:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(2983);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||s;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[p]="string"==typeof e?e:r,i[1]=o;for(var c=2;c<s;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4724:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var a=n(2798),r=(n(2983),n(4993));const s={sidebar_position:-100,sidebar_label:"Intro"},i="React async states",o={unversionedId:"intro",id:"intro",title:"React async states",description:"A multi-paradigm React state management library.",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/react-async-states/docs/intro",draft:!1,editUrl:"https://github.com/incepter/react-async-states/edit/main/packages/docs/docs/intro.md",tags:[],version:"current",sidebarPosition:-100,frontMatter:{sidebar_position:-100,sidebar_label:"Intro"},sidebar:"tutorialSidebar",next:{title:"Concepts",permalink:"/react-async-states/docs/concepts"}},l={},c=[{value:"What is this ?",id:"what-is-this-",level:2},{value:"Main features",id:"main-features",level:2},{value:"<ins>Multi-paradigm nature</ins>",id:"multi-paradigm-nature",level:4},{value:"<ins>Easy to use and Minimal API (<code>useAsyncState</code>).</ins>",id:"easy-to-use-and-minimal-api-useasyncstate",level:4},{value:"<ins>Tiny library with no dependencies and works in all environments</ins>",id:"tiny-library-with-no-dependencies-and-works-in-all-environments",level:4},{value:"<ins>Synchronous and asynchronous; Imperative and declarative support</ins>",id:"synchronous-and-asynchronous-imperative-and-declarative-support",level:4},{value:"<ins>Promises, async/await &amp; generators support</ins>",id:"promises-asyncawait--generators-support",level:4},{value:"<ins>Automatic and friendly cancellations</ins>",id:"automatic-and-friendly-cancellations",level:4},{value:"<ins>Events and callbacks support</ins>",id:"events-and-callbacks-support",level:4},{value:"<ins>Dynamic creation and sharing of states at runtime</ins>",id:"dynamic-creation-and-sharing-of-states-at-runtime",level:4},{value:"<ins>Apply effects on runs: debounce, throttle...</ins>",id:"apply-effects-on-runs-debounce-throttle",level:4},{value:"<ins>On-demand cache support</ins>",id:"on-demand-cache-support",level:4},{value:"<ins>Forks and lanes support</ins>",id:"forks-and-lanes-support",level:4},{value:"<ins>Powerful selectors</ins>",id:"powerful-selectors",level:4},{value:"<ins>And many more</ins>",id:"and-many-more",level:4},{value:"Motivations",id:"motivations",level:2},{value:"Installation",id:"installation",level:2}],u={toc:c};function p(e){let{components:t,...s}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,s,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"react-async-states"},"React async states"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A multi-paradigm React state management library.")),(0,r.kt)("h2",{id:"what-is-this-"},"What is this ?"),(0,r.kt)("p",null,"This is a multi-paradigm library for state management."),(0,r.kt)("p",null,"It aims to facilitate working with ","[a]","synchronous states while sharing them.\nIt was designed to reduce the needed boilerplate to achieve great and effective\nresults."),(0,r.kt)("p",null,"It introduces a new concept: the ",(0,r.kt)("inlineCode",{parentName:"p"},"producer")," that is similar to reducer, async\nreducer or query from other libraries you might know, but with more power."),(0,r.kt)("p",null,"This library provides utilities for low level state manipulation, and other\nlibraries may appear just a small abstraction on top of it."),(0,r.kt)("h2",{id:"main-features"},"Main features"),(0,r.kt)("h4",{id:"multi-paradigm-nature"},(0,r.kt)("ins",null,"Multi-paradigm nature")),(0,r.kt)("p",null,"The library can work with the following modes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Imperative")," and/or ",(0,r.kt)("inlineCode",{parentName:"li"},"declarative")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Synchronous")," and/or ",(0,r.kt)("inlineCode",{parentName:"li"},"Asynchronous")),(0,r.kt)("li",{parentName:"ul"},"Data fetching and/or any form of asynchrony"),(0,r.kt)("li",{parentName:"ul"},"Inside and/or outside ",(0,r.kt)("inlineCode",{parentName:"li"},"React")),(0,r.kt)("li",{parentName:"ul"},"With or without ",(0,r.kt)("inlineCode",{parentName:"li"},"Cache")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Promises"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"async/await")," and even ",(0,r.kt)("inlineCode",{parentName:"li"},"generators")," or nothing at all"),(0,r.kt)("li",{parentName:"ul"},"Allows abstractions on top of it"),(0,r.kt)("li",{parentName:"ul"},"...")),(0,r.kt)("h4",{id:"easy-to-use-and-minimal-api-useasyncstate"},(0,r.kt)("ins",null,"Easy to use and Minimal API (",(0,r.kt)("inlineCode",{parentName:"h4"},"useAsyncState"),").")),(0,r.kt)("p",null,"The library has one main hook: ",(0,r.kt)("inlineCode",{parentName:"p"},"useAsyncState")," which allows the creation,\nsubscription and manipulation of the desired state.\n",(0,r.kt)("a",{parentName:"p",href:"/docs/api/the-whole-api#useasyncstate"},"Here is a sneak peek"),"\nat this hook's full API."),(0,r.kt)("p",null,"The hooks signature is pretty familiar: a configuration and dependencies."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"useAsyncState(create, deps);\n")),(0,r.kt)("h4",{id:"tiny-library-with-no-dependencies-and-works-in-all-environments"},(0,r.kt)("ins",null,"Tiny library with no dependencies and works in all environments")),(0,r.kt)("p",null,"The library has no dependencies and very small on size compared to all the power\nit gives, and it should target all environments (browser, node, native...)."),(0,r.kt)("h4",{id:"synchronous-and-asynchronous-imperative-and-declarative-support"},(0,r.kt)("ins",null,"Synchronous and asynchronous; Imperative and declarative support")),(0,r.kt)("p",null,"The library adds the ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," property as part of the state, the possible values\nare: ",(0,r.kt)("inlineCode",{parentName:"p"},"initial"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"pending"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"success"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"aborted"),"."),(0,r.kt)("p",null,"When your producer runs, it becomes asynchronous if the returned value is a\n",(0,r.kt)("inlineCode",{parentName:"p"},"Thenable")," object. But, you can control the ",(0,r.kt)("inlineCode",{parentName:"p"},"pending")," status: eg, skip it\ntotally if our promise resolves under ",(0,r.kt)("inlineCode",{parentName:"p"},"400ms"),". Or skip it entirely if you want\nto perform some ",(0,r.kt)("inlineCode",{parentName:"p"},"fetch-then-render")," patterns."),(0,r.kt)("p",null,"The library allows you to perform declarative runs using ",(0,r.kt)("inlineCode",{parentName:"p"},"useAsyncState"),"\nhook configuration, while also providing a multiple imperative ",(0,r.kt)("inlineCode",{parentName:"p"},"run")," functions\nwith different signatures to answer your needs."),(0,r.kt)("p",null,"The following image shows the possible state transitions:"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"img",src:n(8729).Z,width:"1209",height:"733"})),(0,r.kt)("h4",{id:"promises-asyncawait--generators-support"},(0,r.kt)("ins",null,"Promises, async/await & generators support")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"producer"),", the core concept of the library can be of different forms (you\ncan even omit it and manipulate the state directly, without a producer function):"),(0,r.kt)("p",null,"Either return a promise (thenable) to your state, use async/await syntax or go\ngenerators. All of these are supported by the library out of the box and\nno configuration is needed."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"useAsyncState();\nuseAsyncState(function getSomeData() {  return fetchMyData(); });\nuseAsyncState(function* someGenerator() {  yield fetchMyData(); });\nuseAsyncState(async function getSomeData() {  return await fetchMyData(); });\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/api/the-whole-api#producer"},"Here is a sneak peek")," at the producer signature:"),(0,r.kt)("h4",{id:"automatic-and-friendly-cancellations"},(0,r.kt)("ins",null,"Automatic and friendly cancellations")),(0,r.kt)("p",null,"The library was designed from the start to support cancellations in a standard\nway: an ",(0,r.kt)("inlineCode",{parentName:"p"},"onAbort")," callback registration function that registers your callbacks,\nthat are invoked once your run is cancelled (either decoratively or imperatively)."),(0,r.kt)("p",null,"In practice, we found ourselves writing the following, depending on context:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"onAbort((reason) => controller.abort(reason));\nonAbort(() => socket.disconnect());\nonAbort(() => worker.terminate());\nonAbort(() => clearInterval(id));\nonAbort(() => clearTimeout(id));\n")),(0,r.kt)("p",null,"When your state loses all the subscriptions (and depending on the ",(0,r.kt)("inlineCode",{parentName:"p"},"resetStateOnDispose"),")\nconfiguration, it will go back to its initial state and aborting any ongoing run.\nThis behavior is opt-in, and it is not the default mode of the library."),(0,r.kt)("h4",{id:"events-and-callbacks-support"},(0,r.kt)("ins",null,"Events and callbacks support")),(0,r.kt)("p",null,"The library supports two forms of imperative notifications when state is updated:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Via ",(0,r.kt)("inlineCode",{parentName:"li"},"events")," as a configuration of ",(0,r.kt)("inlineCode",{parentName:"li"},"useAsyncState"),": This allows you to react\nto updates occurring in a share piece of state."),(0,r.kt)("li",{parentName:"ul"},"Via ",(0,r.kt)("inlineCode",{parentName:"li"},"runc")," function: It allows having callbacks ",(0,r.kt)("inlineCode",{parentName:"li"},"per run"),", not by subscription.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {useAsyncState} from \"react-async-states\";\n\nconst {runc} = useAsyncState({\n  // ... config\n  events: {\n    change: [\n      newState => console.log('state changed'), // will be invoked every state change\n      {\n        status: 'success', // handler will be invoked only in success status\n        handler : (successState) => {},\n      }\n    ],\n  }\n})\n\n// or per run callbacks:\nrunc({\n  args: myOptionalArgs,\n  onError : () => {},\n  onSuccess : () => {},\n  onAborted : () => {}, // not called when the abort status is bailed out\n  // no onPending callback.\n});\n")),(0,r.kt)("h4",{id:"dynamic-creation-and-sharing-of-states-at-runtime"},(0,r.kt)("ins",null,"Dynamic creation and sharing of states at runtime")),(0,r.kt)("p",null,"Any created state is accessible from the whole v8 scope under the key it was\ngiven to it. So it is important to think about giving unique names to any\nstate you create."),(0,r.kt)("h4",{id:"apply-effects-on-runs-debounce-throttle"},(0,r.kt)("ins",null,"Apply effects on runs: debounce, throttle...")),(0,r.kt)("p",null,"To avoid creating additional state pieces and third party utilities,\nthe library has out-of-the box support for effects that can be applied to runs:\nsuch as ",(0,r.kt)("inlineCode",{parentName:"p"},"debounce"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"throttle")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"delay"),".\nThis support allows you to create awesome user experience natively with the\nminimum CPU and RAM fingerprints, without additional libraries or managed\nvariables. It just works in the core of the library. Of course, this requires\nyou to be in an environment where ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout")," exists."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {useAsyncState, RunEffect} from "react-async-states";\n\nconst {run} = useAsyncState({\n  producer: userSearchByUsername,\n  // debounce runs\n  runEffect: RunEffect.debounce,\n  runEffectDurationMs: 300,\n  // skip pending status if it answers less than 200ms\n  skipPendingDelayMs: 200,\n  keepPendingForMs: 500, // stay in pending state for at least 500ms\n});\n\n\n<input onChange={e => run(e.target.value)} /* ... */ />\n')),(0,r.kt)("h4",{id:"on-demand-cache-support"},(0,r.kt)("ins",null,"On-demand cache support")),(0,r.kt)("p",null,"The library has a different cache support: it doesn't cache the value of you state,\nrather, it caches your producer runs when they succeed by hashing the run ",(0,r.kt)("inlineCode",{parentName:"p"},"args"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"payload"),"."),(0,r.kt)("p",null,"Let's add cache support to the previous example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {useAsyncState, RunEffect} from "react-async-states";\n\n// note that the whole configuration object does not depend on render\n// and can be moved to module level static object.\nconst {run} = useAsyncState({\n  producer: userSearchByUsername,\n  // debounce runs\n  runEffect: RunEffect.debounce,\n  runEffectDurationMs: 300,\n  // skip pending status if it answers less than 200ms\n  skipPendingDelayMs: 200,\n  // keep in the pending state for 200s once you step into it\n  keepPendingForMs: 200,\n  \n  // cache config:\n  cacheConfig: {\n    enabled: true, // enable cache\n    // run cache hash is the username passed to the producer, this allows to\n    // have cached entries such as: `incepter` : { state: {data}}\n    hash: (args) => args[0],\n    getDeadline: (state) => state.data.maxAge || Infinity,\n  }\n});\n\n\n<input onChange={e => run(e.target.value)} /* ... */ />\n')),(0,r.kt)("p",null,"The library allows you also to ",(0,r.kt)("inlineCode",{parentName:"p"},"persist")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"load")," cache, even asynchronously\nand then do something in the ",(0,r.kt)("inlineCode",{parentName:"p"},"onCacheLoad")," event."),(0,r.kt)("h4",{id:"forks-and-lanes-support"},(0,r.kt)("ins",null,"Forks and lanes support")),(0,r.kt)("p",null,"Forking a state in the library means having a new state instance, with the same\nproducer, and probably the same cache (configurable), while having a new isolated\nstate with new subscribers."),(0,r.kt)("p",null,"The library has two ways for forks"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Normal forks: obtained by adding ",(0,r.kt)("inlineCode",{parentName:"li"},"fork: true")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"useAsyncState"),", and these\nare standalone states."),(0,r.kt)("li",{parentName:"ul"},"Lanes: These are normal forks, but managed by their parent and share the same\ncache, they can be enumerated from their parent via ",(0,r.kt)("inlineCode",{parentName:"li"},"source.getAllLanes"),",\nand removed by ",(0,r.kt)("inlineCode",{parentName:"li"},"source.removeLane"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {useAsyncState, useSource} from \"react-async-states\";\n\nconst references = createSource(\"refs\", referencesProducer, {\n  /* awesome config */\n});\n\nconst {state} = useAsyncState({\n  source: references,\n  lane: 'cities',\n  lazy: false\n});\nconst {state} = useAsyncState({source: references, lane: 'roles', lazy: false});\n// can be simplified to this:\nconst {state} = useSource(references, 'roles');\n\nconst {state: weatherState} = useAsyncState({key: \"weather\", fork: true});\n\n")),(0,r.kt)("h4",{id:"powerful-selectors"},(0,r.kt)("ins",null,"Powerful selectors")),(0,r.kt)("p",null,"The library has two ways to select data from states:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"via ",(0,r.kt)("inlineCode",{parentName:"li"},"useAsyncState"),": it supports a ",(0,r.kt)("inlineCode",{parentName:"li"},"selector")," configuration can accept the\ncurrent state and the whole cache (you can decide to just work with cache, if you want to!)"),(0,r.kt)("li",{parentName:"ul"},"via ",(0,r.kt)("inlineCode",{parentName:"li"},"useSelector"),": This hook allows you to select data from one or multiple\npieces of states, it even allows combining ",(0,r.kt)("inlineCode",{parentName:"li"},"keys")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"source")," object to select from them.\nIt also can dynamically select states as they get created.")),(0,r.kt)("h4",{id:"and-many-more"},(0,r.kt)("ins",null,"And many more")),(0,r.kt)("p",null,"The previous examples are just a few subset of the library's power, there are\nseveral other unique features like:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Cascade runs and cancellations"),(0,r.kt)("li",{parentName:"ul"},"Run and wait for resolve"),(0,r.kt)("li",{parentName:"ul"},"Producer states that emit updates after resolve (such as websockets)"),(0,r.kt)("li",{parentName:"ul"},"Configurable state disposal and garbage collection"),(0,r.kt)("li",{parentName:"ul"},"React 18 support, and no tearing even without ",(0,r.kt)("inlineCode",{parentName:"li"},"useSES")),(0,r.kt)("li",{parentName:"ul"},"StateBoundary and support for all three ",(0,r.kt)("inlineCode",{parentName:"li"},"render strategies")),(0,r.kt)("li",{parentName:"ul"},"post subscribe and change events"),(0,r.kt)("li",{parentName:"ul"},"And many more..")),(0,r.kt)("h2",{id:"motivations"},"Motivations"),(0,r.kt)("p",null,"Managing state using React native APIs or third party libraries ain't an easy\ntask. Let's talk about the parts we miss:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Share state in all directions of your app."),(0,r.kt)("li",{parentName:"ul"},"Combining synchronous and asynchronous effects."),(0,r.kt)("li",{parentName:"ul"},"Automatically reset a state when you no longer use it."),(0,r.kt)("li",{parentName:"ul"},"Dealing with concurrent asynchronous operations' callbacks."),(0,r.kt)("li",{parentName:"ul"},"Dynamically share states, subscribe and have full control over them."),(0,r.kt)("li",{parentName:"ul"},"Select a part of a state and re-render only when you decide that it changed."),(0,r.kt)("li",{parentName:"ul"},"The need to add additional state values each time to represent loading and error states."),(0,r.kt)("li",{parentName:"ul"},"Automatically cancel asynchronous operations when the component unmounts, or dependencies change."),(0,r.kt)("li",{parentName:"ul"},"Cannot automatically declare and share a state from a component and subscribe to it from other parts of the app.")),(0,r.kt)("p",null,"Without these aspects, your application will surely be in a mess, when you get\nto see search results of the very early search operation, when you have to do\nover-engineered stuff to support a simple thing such as cancelling a fetch request\nand a lot of other messy stuff."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)("p",null,"The library is available as a package on NPM for use with a module bundler or in a Node application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="NPM"',title:'"NPM"'},"npm install async-states react-async-states\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="YARN"',title:'"YARN"'},"yarn add async-states react-async-states\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="PNPM"',title:'"PNPM"'},"pnpm add async-states react-async-states\n")))}p.isMDXComponent=!0},8729:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/state-transitions-1140f9f064fef7abea6bb559c1841b39.png"}}]);