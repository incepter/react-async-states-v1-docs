"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[113],{4993:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(2983);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,h=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},5365:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(2798),a=(n(2983),n(4993));const o={sidebar_position:0,sidebar_label:"Application"},i="What does this offer ?",l={unversionedId:"application/application",id:"application/application",title:"What does this offer ?",description:"This API and context offer a new way of seeing how we write our frontend applications.",source:"@site/docs/application/application.md",sourceDirName:"application",slug:"/application/",permalink:"/react-async-states/docs/application/",draft:!1,editUrl:"https://github.com/incepter/react-async-states/edit/main/packages/docs/docs/application/application.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0,sidebar_label:"Application"},sidebar:"tutorialSidebar",previous:{title:"React 18+",permalink:"/react-async-states/docs/api/concurrent-mode"},next:{title:"Intro",permalink:"/react-async-states/docs/utils/intro"}},s={},p=[{value:"How will you use it",id:"how-will-you-use-it",level:2},{value:"What&#39;s the idea behind it",id:"whats-the-idea-behind-it",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"what-does-this-offer-"},"What does this offer ?"),(0,a.kt)("p",null,"This API and context offer a new way of seeing how we write our frontend applications."),(0,a.kt)("p",null,"In fact, Here is an:"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Application-wide Type-safe lazy-loaded state manipulation")),(0,a.kt)("p",null,"It allows:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Enumerate all states in the application at dev-time"),(0,a.kt)("li",{parentName:"ul"},"Powerful auto-completion for all states (no selectors, no string)"),(0,a.kt)("li",{parentName:"ul"},"Subscribe and manipulate all states, from anywhere"),(0,a.kt)("li",{parentName:"ul"},"Typed all the way up-and-down")),(0,a.kt)("h2",{id:"how-will-you-use-it"},"How will you use it"),(0,a.kt)("p",null,"In a nutshell, here is a small example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="application.js"',title:'"application.js"'},'import { api, createApplication } from "react-async-states"\n\nlet Application = {\n  auth: {\n    login: api<Pricipal, Error, never, [LoginRequest]>()\n  },\n  users: {\n    list: api<Page<User>, Error, "Timeout", [string]>(),\n  }\n}\n\nexport let app = createApplication<typeof Application>(Application)\n\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="UsersList.js"',title:'"UsersList.js"'},'import { ProducerProps } from "react-async-states"\n\nfunction fetchUsersProducer(props: ProducerProps<Page<User>, Error, "Timeout", [string]>) {\n  let controller = new AbortController()\n  props.onAbort(() => controller.abort())\n  \n  let [query] = props.args;\n  return searchUsers(query, controller.signal)\n}\n\nexport function UsersListComponent() {\n  let {state, run} = app.users.list.use()\n  // run is called with a single string argument\n  return <UiAround state run />\n}\n')),(0,a.kt)("h2",{id:"whats-the-idea-behind-it"},"What's the idea behind it"),(0,a.kt)("p",null,"This abstraction does an analogy to ",(0,a.kt)("inlineCode",{parentName:"p"},"resources")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"APIs")," from the backend land."),(0,a.kt)("p",null,"In practice, we make resources that exposes APIs to be used by our clients."),(0,a.kt)("p",null,"So, this abstraction does a type mapping over a two-level deep object where you\ndefine in advance the types of the states in your application."),(0,a.kt)("p",null,"This abstraction doesn't force you to define the whole producers of any state\nin your application, you should provide only types. And this abstraction gives\nyou a similar object, but rather than your API configuration, you get a ",(0,a.kt)("inlineCode",{parentName:"p"},"token"),"\nwith this type:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"\nexport type Token<T, E, R, A extends unknown[]> = {\n  (): Source<T, E, R, A>,\n  inject(\n    fn: Producer<T, E, R, A>,\n    config?: ProducerConfig<T, E, R, A>\n  ): Token<T, E, R, A>\n  use<S = State<T, E, R, A>>(\n    config?: UseConfig<T, E, R, A, S>,\n    deps?: any[]\n  ): UseAsyncState<T, E, R, A, S>,\n}\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"()"),": Invoking the token returns the ",(0,a.kt)("inlineCode",{parentName:"li"},"Source")," object created for this state.\nIf not created, it will throw an error that you should obviously catch in dev\nmode, it even includes the full path of the API and the function to be called"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"inject(producer, producerConfig)"),": This effectively creates your state.\nIf it already was created, the producer and the config will be patched."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"use"),": This is ",(0,a.kt)("inlineCode",{parentName:"li"},"useAsyncState")," under the hood, it accepts the properties\nrelated to subscription from useAsyncState.")))}u.isMDXComponent=!0}}]);